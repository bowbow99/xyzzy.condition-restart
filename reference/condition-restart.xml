<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE book [
<!ELEMENT book (chapter*)>
<!ELEMENT chapter (title,type,arguments?,package?,description,seealso*,link*,section,file?)>
<!ELEMENT title (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT arguments (#PCDATA)>
<!ELEMENT package (#PCDATA)>
<!ELEMENT description (#PCDATA)>
<!ELEMENT seealso (#PCDATA)>
<!ELEMENT link (#PCDATA)>
<!ELEMENT section (#PCDATA)>
<!ELEMENT file (#PCDATA)>
]>

<book>

<chapter>
   <title>cerror</title>
   <type>Function</type>
   <arguments>cerror FMT-CONTROL DATUM &amp;rest ARGS</arguments>
   <package>lisp</package>
   <description>
回復可能なエラーを投げます。

関数 error 同様に DATUM（及び ARGUMENTSS）で指定されたコンディションを投げ
ますが、そのときに再起動 continue を確立しておきます。通知されたコンディショ
ンを handler-bind などで捉えて continue 再起動を起動すると、cerror 式は nil
を返してその後の処理を続行させることができます。

  FMT-CONTROL : 再起動の概要を出力するフォーマット文字列です。引数として
                ARUMENTS が与えられます。
  DATUM       : 投げるエラーを指定します。詳しくは error 関数を参照してくだ
                さい。
  ARGUMENTS   : 同上。

ARGUMENTS は再起動の概要とエラー指定の両方に使われます。エラー指定に必要だけ
ど概要の出力には不要なものは "~*" で無視することができます。
   </description>
   <seealso>signal</seealso>
   <seealso>error</seealso>
   <link>[CLHS cerror] http://www.lispworks.com/documentation/lw51/CLHS/Body/f_cerror.htm#cerror</link>
   <section>エラー</section>
   <file>condition-restart.l</file>
</chapter>

<chapter>
   <title>invoke-restart-interactively</title>
   <type>Function</type>
   <arguments>invoke-restart-interactively IDENTIFIER</arguments>
   <package>lisp</package>
   <description>
再起動を対話的に起動します。
invoke-restart-interactively によって起動された再起動は、restart-case の
:interactive オプション、あるいは restart-bind の :interactive-function
オプションで指定された関数を実行することで、対話的に再起動の引数を取得
します。

  IDENTIFIER : 再起動の名前（シンボル）か再起動オブジェクトを指定します。

   </description>
   <seealso>restart-bind</seealso>
   <seealso>restart-case</seealso>
   <seealso>invoke-restart</seealso>
   <link>[CLHS invoke-restart-interactively] http://www.lispworks.com/documentation/lw50/CLHS/Body/f_invo_2.htm#invoke-restart-interactively</link>
   <section>エラー</section>
   <file>condition-restart.l</file>
</chapter>

<chapter>
   <title>find-restart</title>
   <type>Function</type>
   <arguments>find-restart IDENTIFIER &amp;optional CONDITION</arguments>
   <package>lisp</package>
   <description>
指定された再起動を現在の環境から探して返します。
見つからなかったら nil を返します。

  IDENTIFIER 再起動の名前（シンボル）か再起動オブジェクトを指定します。
  CONDITION  コンディションを指定すると、そのコンディションに対して有効
             な再起動の中から探します。
             restart-bind の :test-function 参照。

   </description>
   <seealso>restart-bind</seealso>
   <seealso>restart-case</seealso>
   <seealso>compute-restarts</seealso>
   <link>[CLHS find-restart] http://www.lispworks.com/documentation/lw50/CLHS/Body/f_find_r.htm#find-restart</link>
   <file>condition-restart.l</file>
   <section>エラー</section>
</chapter>

<chapter>
   <title>invoke-restart</title>
   <type>Function</type>
   <arguments>invoke-restart IDENTIFIER &amp;rest ARGUMENTS</arguments>
   <package>lisp</package>
   <description>
IDENTIFIER で指定される再起動を起動します。

  IDENTIFIER 起動する再起動の名前（シンボル）か再起動オブジェクトを指定
             します。
             指定される再起動が確立されていない場合は restart-not-found
             エラーが通知されます。
  ARGUMENTS  再起動に渡す引数があれば。

再起動は制御をどこかに飛ばすかも知れません。飛ばさなかった（普通に値を
返した）場合、invoke-restart は再起動が返した値をそのまま返します。
   </description>
   <seealso>find-restart</seealso>
   <seealso>restart-case</seealso>
   <link>[CLHS invoke-restart] http://www.lispworks.com/documentation/lw50/CLHS/Body/f_invo_1.htm#invoke-restart</link>
   <file>condition-restart.l</file>
   <section>エラー</section>
</chapter>

<chapter>
   <title>compute-restarts</title>
   <type>Function</type>
   <arguments>compute-restarts &amp;optional CONDITION</arguments>
   <package>lisp</package>
   <description>
現在の環境で確立されている再起動のリストを返します。

  CONDITION コンディションを指定すると、そのコンディションに対して有効な
            再起動のみのリストを返します。

   </description>
   <seealso>restart-case</seealso>
   <seealso>restart-bind</seealso>
   <seealso>with-simple-restart</seealso>
   <seealso>find-restart</seealso>
   <seealso>invoke-restart</seealso>
   <link>[CLHS compute-restarts] http://www.lispworks.com/documentation/lw50/CLHS/Body/f_comp_1.htm#compute-restarts</link>
   <file>condition-restart.l</file>
   <section>エラー</section>
</chapter>

<chapter>
   <title>with-simple-restart</title>
   <type>Macro</type>
   <arguments>with-simple-restart (NAME FMT-CONTROL &amp;rest FMT-ARGUMENTS) &amp;body FORMS</arguments>
   <package>lisp</package>
   <description>
NAME という名の再起動を確立した環境で FORMS を評価します。
この再起動が起動されると、with-simple-restart 式は多値で nil と t を返して
終了します。

   </description>
   <link>[CLHS: with-simple-restart] http://www.lispworks.com/documentation/lw50/CLHS/Body/m_w_smp_.htm#with-simple-restart</link>
   <file>condition-restart.l</file>
</chapter>

<chapter>
   <title>restart-case</title>
   <type>Macro</type>
   <arguments>restart-case FORM RESTART-CLAUSE*</arguments>
   <package>lisp</package>
   <description>
RESTART-CLAUSE で指定された再起動を確立した環境で FORM を評価します。

restart-case で確立された再起動が起動されると、起動された再起動の実行結果
が restart-case 式の結果として返されます。

RESTART-CLAUSE の書式は以下の通りです。

  (NAME LAMBDA-LIST
    {:interactive INTERACTIVE-EXPR}
    {:report REPORT-EXPR}
    {:test TEST-EXPR}
    BODY...)

  NAME              再起動の名前をシンボルで指定します。
  LAMBDA-LIST       再起動の仮引数を指定します。lambda とか使うことの
                    できる &amp;optional やら &amp;rest やらを使えます。
  BODY              再起動が起動されたときに実行されます。
                    LAMBDA-LIST で指定した仮引数が与えられた引数に束縛され
                    た環境で実行され、BODY の結果が restart-case 式の結果
                    となります。

  INTERACTIVE-EXPR  対話的に起動されたときに実行される関数を、関数名
                    （シンボルかlambda 式）で指定します。#' はつけない
                    でください。
                    対話的に起動されるとこの関数は引数なしで実行されます。
                    この関数は再起動へ渡す引数のリストを返さなければなり
                    ません。
  REPORT-EXPR       再起動の概要を説明する文字列か、概要を出力する関数の
                    名前を指定します。
              関数    関数名（シンボルか lambda 式）を指定します。#' はつけ
                      ないでください。関数は出力先のストリームを受け取り、
                      再起動の概要を出力しなければなりません。
              文字列  再起動の概要をそのまま文字列で指定します。
  TEST-EXPR         あるコンディションに対してその再起動が有効か否かを判断
                    する関数の名前を指定します。#' はつけないでください。
                    省略されるとその再起動は全てのコンディションに対して
                    有効になります。


   </description>
   <seealso>store-value</seealso>
   <seealso>use-value</seealso>
   <seealso>muffle-warning</seealso>
   <seealso>continue</seealso>
   <seealso>abort</seealso>
   <seealso>invoke-restart-interactively</seealso>
   <seealso>invoke-restart</seealso>
   <seealso>with-simple-restart</seealso>
   <seealso>restart-bind</seealso>
   <link>[CLHS: restart-case] http://www.lispworks.com/documentation/lw50/CLHS/Body/m_rst_ca.htm</link>
   <section>エラー</section>
   <file>condition-restart.l</file>
</chapter>

<chapter>
   <title>restart-bind</title>
   <type>Macro</type>
   <arguments>restart-bind (&amp;rest RESTARTS) &amp;body BODY</arguments>
   <package>lisp</package>
   <description>
再起動を確立した環境で BODY を評価します。

(restart-bind ((NAME RESTART-FUNCTION
                {:interactive-function INTERACTIVE-FUNCTION}
                {:report-function REPORT-FUNCTION}
                {:test-function TEST-FUNCTION})
               ...)
  BODY...)

  NAME                 - 再起動の名前（シンボル）です。
  RESTART-FUNCTION     - 再起動が起動されたときに実行される関数を指定します。
  INTERACTIVE-FUNCTION - 再起動が invoke-restart-interactively によって
                         対話的に起動されたときに実行される関数を指定します。
                         この関数は引数なしで実行され、RESTART-FUNCTION に渡す
                         引数のリストを返さなければなりません。
  REPORT-FUNCTION      - 再起動の概要を出力する関数を指定します。
                         REPORT-FUNCTION は引数に出力先のストリームを受け取り、
                         その再起動の概要を出力しなければなりません。
  TEST-FUNCTION        - 通知されたコンディションに対してその再起動が有効か
                         どうかを判断する関数を指定します。
                         この関数は引数にコンディションを受け取り、与えられた
                         コンディションについてその再起動が有効だったら true
                         を返しましょう。

restart-bind は再起動を確立するだけで、それ以上のことをしたい場合は自分
でやらなければなりません（tagbody と go で制御を移すとか）。
大抵の場合は restart-case の方が便利だと思います。
   </description>
   <seealso>with-simple-restart</seealso>
   <seealso>restart-case</seealso>
   <seealso>invoke-restart</seealso>
   <link>[CLHS: restart-bind] http://www.lispworks.com/documentation/lw50/CLHS/Body/m_rst_bi.htm</link>
   <section>エラー</section>
   <file>condition-restart.l</file>
</chapter>

</book>
